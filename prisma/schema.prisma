// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Expense {
  id             String   @id @default(uuid())
  amount         Int
  date           DateTime
  note           String?
  location       String?
  category       Category @relation(fields: [categoryType, categoryName, categoryUserId], references: [type, name, userId])
  categoryType   String
  categoryName   String
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  categoryUserId String
}

model Income {
  id             String   @id @default(uuid())
  amount         Int
  date           DateTime
  note           String?
  category       Category @relation(fields: [categoryType, categoryName, categoryUserId], references: [type, name, userId])
  categoryType   String
  categoryName   String
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  categoryUserId String
}

model Budget {
  id             String   @id @default(uuid())
  category       Category @relation(fields: [categoryType, categoryName, categoryUserId], references: [type, name, userId])
  initAmount     Int
  currentAmount  Int
  resetPeriod    String
  categoryType   String
  categoryName   String
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  categoryUserId String
}

model Category {
  type     String
  name     String
  emoji    String
  color    String
  Expenses Expense[]
  Incomes  Income[]
  Budgets  Budget[]
  User     User      @relation(fields: [userId], references: [id])
  userId   String

  @@id([type, name, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  expenses      Expense[]
  incomes       Income[]
  budgets       Budget[]
  categories    Category[]
}
